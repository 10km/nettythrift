/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package alab.thriftLabService;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TBalance implements org.apache.thrift.TBase<TBalance, TBalance._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TBalance");

  private static final org.apache.thrift.protocol.TField LEFT_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("leftMoney", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField CONSUME_HISTORY_FIELD_DESC = new org.apache.thrift.protocol.TField("consumeHistory", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField MONTH_CONSUMES_FIELD_DESC = new org.apache.thrift.protocol.TField("monthConsumes", org.apache.thrift.protocol.TType.MAP, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TBalanceStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TBalanceTupleSchemeFactory());
  }

  public double leftMoney; // required
  public List<String> consumeHistory; // required
  public Map<Integer,Double> monthConsumes; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LEFT_MONEY((short)1, "leftMoney"),
    CONSUME_HISTORY((short)2, "consumeHistory"),
    MONTH_CONSUMES((short)3, "monthConsumes");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LEFT_MONEY
          return LEFT_MONEY;
        case 2: // CONSUME_HISTORY
          return CONSUME_HISTORY;
        case 3: // MONTH_CONSUMES
          return MONTH_CONSUMES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LEFTMONEY_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LEFT_MONEY, new org.apache.thrift.meta_data.FieldMetaData("leftMoney", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CONSUME_HISTORY, new org.apache.thrift.meta_data.FieldMetaData("consumeHistory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.MONTH_CONSUMES, new org.apache.thrift.meta_data.FieldMetaData("monthConsumes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TBalance.class, metaDataMap);
  }

  public TBalance() {
  }

  public TBalance(
    double leftMoney,
    List<String> consumeHistory,
    Map<Integer,Double> monthConsumes)
  {
    this();
    this.leftMoney = leftMoney;
    setLeftMoneyIsSet(true);
    this.consumeHistory = consumeHistory;
    this.monthConsumes = monthConsumes;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TBalance(TBalance other) {
    __isset_bitfield = other.__isset_bitfield;
    this.leftMoney = other.leftMoney;
    if (other.isSetConsumeHistory()) {
      List<String> __this__consumeHistory = new ArrayList<String>();
      for (String other_element : other.consumeHistory) {
        __this__consumeHistory.add(other_element);
      }
      this.consumeHistory = __this__consumeHistory;
    }
    if (other.isSetMonthConsumes()) {
      Map<Integer,Double> __this__monthConsumes = new HashMap<Integer,Double>();
      for (Map.Entry<Integer, Double> other_element : other.monthConsumes.entrySet()) {

        Integer other_element_key = other_element.getKey();
        Double other_element_value = other_element.getValue();

        Integer __this__monthConsumes_copy_key = other_element_key;

        Double __this__monthConsumes_copy_value = other_element_value;

        __this__monthConsumes.put(__this__monthConsumes_copy_key, __this__monthConsumes_copy_value);
      }
      this.monthConsumes = __this__monthConsumes;
    }
  }

  public TBalance deepCopy() {
    return new TBalance(this);
  }

  @Override
  public void clear() {
    setLeftMoneyIsSet(false);
    this.leftMoney = 0.0;
    this.consumeHistory = null;
    this.monthConsumes = null;
  }

  public double getLeftMoney() {
    return this.leftMoney;
  }

  public TBalance setLeftMoney(double leftMoney) {
    this.leftMoney = leftMoney;
    setLeftMoneyIsSet(true);
    return this;
  }

  public void unsetLeftMoney() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEFTMONEY_ISSET_ID);
  }

  /** Returns true if field leftMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetLeftMoney() {
    return EncodingUtils.testBit(__isset_bitfield, __LEFTMONEY_ISSET_ID);
  }

  public void setLeftMoneyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEFTMONEY_ISSET_ID, value);
  }

  public int getConsumeHistorySize() {
    return (this.consumeHistory == null) ? 0 : this.consumeHistory.size();
  }

  public java.util.Iterator<String> getConsumeHistoryIterator() {
    return (this.consumeHistory == null) ? null : this.consumeHistory.iterator();
  }

  public void addToConsumeHistory(String elem) {
    if (this.consumeHistory == null) {
      this.consumeHistory = new ArrayList<String>();
    }
    this.consumeHistory.add(elem);
  }

  public List<String> getConsumeHistory() {
    return this.consumeHistory;
  }

  public TBalance setConsumeHistory(List<String> consumeHistory) {
    this.consumeHistory = consumeHistory;
    return this;
  }

  public void unsetConsumeHistory() {
    this.consumeHistory = null;
  }

  /** Returns true if field consumeHistory is set (has been assigned a value) and false otherwise */
  public boolean isSetConsumeHistory() {
    return this.consumeHistory != null;
  }

  public void setConsumeHistoryIsSet(boolean value) {
    if (!value) {
      this.consumeHistory = null;
    }
  }

  public int getMonthConsumesSize() {
    return (this.monthConsumes == null) ? 0 : this.monthConsumes.size();
  }

  public void putToMonthConsumes(int key, double val) {
    if (this.monthConsumes == null) {
      this.monthConsumes = new HashMap<Integer,Double>();
    }
    this.monthConsumes.put(key, val);
  }

  public Map<Integer,Double> getMonthConsumes() {
    return this.monthConsumes;
  }

  public TBalance setMonthConsumes(Map<Integer,Double> monthConsumes) {
    this.monthConsumes = monthConsumes;
    return this;
  }

  public void unsetMonthConsumes() {
    this.monthConsumes = null;
  }

  /** Returns true if field monthConsumes is set (has been assigned a value) and false otherwise */
  public boolean isSetMonthConsumes() {
    return this.monthConsumes != null;
  }

  public void setMonthConsumesIsSet(boolean value) {
    if (!value) {
      this.monthConsumes = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LEFT_MONEY:
      if (value == null) {
        unsetLeftMoney();
      } else {
        setLeftMoney((Double)value);
      }
      break;

    case CONSUME_HISTORY:
      if (value == null) {
        unsetConsumeHistory();
      } else {
        setConsumeHistory((List<String>)value);
      }
      break;

    case MONTH_CONSUMES:
      if (value == null) {
        unsetMonthConsumes();
      } else {
        setMonthConsumes((Map<Integer,Double>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LEFT_MONEY:
      return Double.valueOf(getLeftMoney());

    case CONSUME_HISTORY:
      return getConsumeHistory();

    case MONTH_CONSUMES:
      return getMonthConsumes();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LEFT_MONEY:
      return isSetLeftMoney();
    case CONSUME_HISTORY:
      return isSetConsumeHistory();
    case MONTH_CONSUMES:
      return isSetMonthConsumes();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TBalance)
      return this.equals((TBalance)that);
    return false;
  }

  public boolean equals(TBalance that) {
    if (that == null)
      return false;

    boolean this_present_leftMoney = true;
    boolean that_present_leftMoney = true;
    if (this_present_leftMoney || that_present_leftMoney) {
      if (!(this_present_leftMoney && that_present_leftMoney))
        return false;
      if (this.leftMoney != that.leftMoney)
        return false;
    }

    boolean this_present_consumeHistory = true && this.isSetConsumeHistory();
    boolean that_present_consumeHistory = true && that.isSetConsumeHistory();
    if (this_present_consumeHistory || that_present_consumeHistory) {
      if (!(this_present_consumeHistory && that_present_consumeHistory))
        return false;
      if (!this.consumeHistory.equals(that.consumeHistory))
        return false;
    }

    boolean this_present_monthConsumes = true && this.isSetMonthConsumes();
    boolean that_present_monthConsumes = true && that.isSetMonthConsumes();
    if (this_present_monthConsumes || that_present_monthConsumes) {
      if (!(this_present_monthConsumes && that_present_monthConsumes))
        return false;
      if (!this.monthConsumes.equals(that.monthConsumes))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TBalance other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TBalance typedOther = (TBalance)other;

    lastComparison = Boolean.valueOf(isSetLeftMoney()).compareTo(typedOther.isSetLeftMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeftMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leftMoney, typedOther.leftMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConsumeHistory()).compareTo(typedOther.isSetConsumeHistory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConsumeHistory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.consumeHistory, typedOther.consumeHistory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonthConsumes()).compareTo(typedOther.isSetMonthConsumes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonthConsumes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monthConsumes, typedOther.monthConsumes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TBalance(");
    boolean first = true;

    sb.append("leftMoney:");
    sb.append(this.leftMoney);
    first = false;
    if (!first) sb.append(", ");
    sb.append("consumeHistory:");
    if (this.consumeHistory == null) {
      sb.append("null");
    } else {
      sb.append(this.consumeHistory);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("monthConsumes:");
    if (this.monthConsumes == null) {
      sb.append("null");
    } else {
      sb.append(this.monthConsumes);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TBalanceStandardSchemeFactory implements SchemeFactory {
    public TBalanceStandardScheme getScheme() {
      return new TBalanceStandardScheme();
    }
  }

  private static class TBalanceStandardScheme extends StandardScheme<TBalance> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TBalance struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LEFT_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.leftMoney = iprot.readDouble();
              struct.setLeftMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONSUME_HISTORY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                struct.consumeHistory = new ArrayList<String>(_list18.size);
                for (int _i19 = 0; _i19 < _list18.size; ++_i19)
                {
                  String _elem20; // required
                  _elem20 = iprot.readString();
                  struct.consumeHistory.add(_elem20);
                }
                iprot.readListEnd();
              }
              struct.setConsumeHistoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MONTH_CONSUMES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map21 = iprot.readMapBegin();
                struct.monthConsumes = new HashMap<Integer,Double>(2*_map21.size);
                for (int _i22 = 0; _i22 < _map21.size; ++_i22)
                {
                  int _key23; // required
                  double _val24; // required
                  _key23 = iprot.readI32();
                  _val24 = iprot.readDouble();
                  struct.monthConsumes.put(_key23, _val24);
                }
                iprot.readMapEnd();
              }
              struct.setMonthConsumesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TBalance struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LEFT_MONEY_FIELD_DESC);
      oprot.writeDouble(struct.leftMoney);
      oprot.writeFieldEnd();
      if (struct.consumeHistory != null) {
        oprot.writeFieldBegin(CONSUME_HISTORY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.consumeHistory.size()));
          for (String _iter25 : struct.consumeHistory)
          {
            oprot.writeString(_iter25);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.monthConsumes != null) {
        oprot.writeFieldBegin(MONTH_CONSUMES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, struct.monthConsumes.size()));
          for (Map.Entry<Integer, Double> _iter26 : struct.monthConsumes.entrySet())
          {
            oprot.writeI32(_iter26.getKey());
            oprot.writeDouble(_iter26.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TBalanceTupleSchemeFactory implements SchemeFactory {
    public TBalanceTupleScheme getScheme() {
      return new TBalanceTupleScheme();
    }
  }

  private static class TBalanceTupleScheme extends TupleScheme<TBalance> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TBalance struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLeftMoney()) {
        optionals.set(0);
      }
      if (struct.isSetConsumeHistory()) {
        optionals.set(1);
      }
      if (struct.isSetMonthConsumes()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetLeftMoney()) {
        oprot.writeDouble(struct.leftMoney);
      }
      if (struct.isSetConsumeHistory()) {
        {
          oprot.writeI32(struct.consumeHistory.size());
          for (String _iter27 : struct.consumeHistory)
          {
            oprot.writeString(_iter27);
          }
        }
      }
      if (struct.isSetMonthConsumes()) {
        {
          oprot.writeI32(struct.monthConsumes.size());
          for (Map.Entry<Integer, Double> _iter28 : struct.monthConsumes.entrySet())
          {
            oprot.writeI32(_iter28.getKey());
            oprot.writeDouble(_iter28.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TBalance struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.leftMoney = iprot.readDouble();
        struct.setLeftMoneyIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.consumeHistory = new ArrayList<String>(_list29.size);
          for (int _i30 = 0; _i30 < _list29.size; ++_i30)
          {
            String _elem31; // required
            _elem31 = iprot.readString();
            struct.consumeHistory.add(_elem31);
          }
        }
        struct.setConsumeHistoryIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map32 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.monthConsumes = new HashMap<Integer,Double>(2*_map32.size);
          for (int _i33 = 0; _i33 < _map32.size; ++_i33)
          {
            int _key34; // required
            double _val35; // required
            _key34 = iprot.readI32();
            _val35 = iprot.readDouble();
            struct.monthConsumes.put(_key34, _val35);
          }
        }
        struct.setMonthConsumesIsSet(true);
      }
    }
  }

}

